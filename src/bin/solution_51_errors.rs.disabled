#[derive(Debug, Clone)]
pub enum Operation {
    Add,
    Subtract,
    Multiply,
    Divide,
}

#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Error {
    DivisionByZero,
}

#[derive(Debug, Clone)]
pub enum Expression {
    Number(i32),
    Operation {
        op: Operation,
        left: Box<Expression>,
        right: Box<Expression>,
    },
}

fn eval(expr: Expression) -> Result<i32, Error> {
    Ok(match expr {
        Expression::Number(n) => n,
        Expression::Operation { op, left, right } => {
            let left_value = eval(*left)?;
            let right_value = eval(*right)?;
            match op {
                Operation::Add => left_value + right_value,
                Operation::Subtract => left_value - right_value,
                Operation::Multiply => left_value * right_value,
                Operation::Divide if right_value == 0 => return Err(Error::DivisionByZero),
                Operation::Divide => left_value / right_value,
            }
        }
    })
}

fn main() {
    let expr = Expression::Operation {
        op: Operation::Add,
        left: Box::new(Expression::Number(5)),
        right: Box::new(Expression::Operation {
            op: Operation::Multiply,
            left: Box::new(Expression::Number(2)),
            right: Box::new(Expression::Number(3)),
        }),
    };

    println!("{:?} = {:?}", expr.clone(), eval(expr));
}

#[test]
fn test_div_0() {
    assert_eq!(
        eval(Expression::Operation {
            op: Operation::Divide,
            left: Box::new(Expression::Number(10)),
            right: Box::new(Expression::Number(0)),
        }),
        Err(Error::DivisionByZero)
    );
}

#[test]
fn test_sum() {
    assert_eq!(
        eval(Expression::Operation {
            op: Operation::Add,
            left: Box::new(Expression::Number(10)),
            right: Box::new(Expression::Number(20)),
        }),
        Ok(30)
    );
}

#[test]
fn test_recursion() {
    let term1 = Expression::Operation {
        op: Operation::Multiply,
        left: Box::new(Expression::Number(10)),
        right: Box::new(Expression::Number(9)),
    };
    let term2 = Expression::Operation {
        op: Operation::Multiply,
        left: Box::new(Expression::Operation {
            op: Operation::Subtract,
            left: Box::new(Expression::Number(3)),
            right: Box::new(Expression::Number(4)),
        }),
        right: Box::new(Expression::Number(5)),
    };
    assert_eq!(
        eval(Expression::Operation {
            op: Operation::Add,
            left: Box::new(term1),
            right: Box::new(term2),
        }),
        Ok(85)
    );
}
